import {execSync} from 'child_process';
import {readFileSync, writeFileSync} from 'fs';
import {dirname, join, resolve} from 'path';
import {fileURLToPath} from 'url';

async function buildLLHTTPWasm() {
	try {
		const scriptDir = dirname(fileURLToPath(import.meta.url));
		const dockerfilePath = resolve(scriptDir, './Build.dockerfile');
		const buildDir = resolve(scriptDir, '../src/llhttp/build/wasm');

		console.log('Building Docker image...');
		execSync(`docker build -t llhttp -f ${dockerfilePath} .`, {
			stdio: 'inherit',
			cwd: scriptDir,
		});

		console.log('Running Docker container to build WASM...');
		execSync(`docker run --rm -v "${buildDir}:/build/build/wasm" llhttp`, {
			stdio: 'inherit',
			cwd: scriptDir,
		});

		console.log('Converting WASM to base64...');
		const wasmPath = join(buildDir, 'llhttp.wasm');
		const base64Wasm = readFileSync(wasmPath).toString('base64');

		const def = `// Generated by packages/llhttp-wasm/scripts/build-wasm.ts\n\nexport const wasmBase64 = "${base64Wasm}";`;
		writeFileSync(join(buildDir, '../../base64.ts'), def);

		console.log('Cleaning up...');
		const filesToRemove = ['constants.js.map', 'llhttp.wasm', 'utils.js.map'];

		for (const file of filesToRemove) {
			const filePath = join(buildDir, file);
			try {
				execSync(`rm -f "${filePath}"`);
			} catch (err) {
				console.warn(`Warning: Could not remove ${file}`);
			}
		}
		console.log('Build completed successfully!');
		console.log(`Base64 file: ${join(scriptDir, '../base64.ts')}`);
		console.log(`Artifacts: ${buildDir}`);
	} catch (error) {
		console.error('Build failed:', error);
		process.exit(1);
	}
}

buildLLHTTPWasm().catch(console.error);
